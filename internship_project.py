# -*- coding: utf-8 -*-
"""INTERNSHIP_PROJECT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GBqVWm3URs9GfKRNvgqAmfHbOTvPyJYQ

# **Libraries Used**
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

df=pd.read_csv('Amazon Sale Report.csv')
df.head(5)

df.columns

"""# **Column Explanation as dictionary**"""

column_explanation = {
    "index": "Dataset ka row number (auto generated index).",
    "Order ID": "Unique order identification number from Amazon.",
    "Date": "Order placed date.",
    "Status": "Order ka status (Delivered, Cancelled, Pending, etc.).",
    "Fulfilment": "Kisne order fulfill kiya (Merchant / Amazon).",
    "Sales Channel": "Jis platform se order aaya (Amazon.in etc.).",
    "ship-service-level": "Shipping service type (Standard, Express, etc.).",
    "Category": "Product category (e.g., T-shirt, Shirt, etc.).",
    "Size": "Product ka size (S, M, L, XL, etc.).",
    "Courier Status": "Shipment ka status (Shipped, On the Way, etc.).",
    "Qty": "Quantity of items in the order.",
    "currency": "Currency type (INR, USD, etc.).",
    "Amount": "Order value (total sales amount).",
    "ship-city": "Customer ka delivery city.",
    "ship-state": "Customer ka delivery state.",
    "ship-postal-code": "Delivery postal/zip code.",
    "ship-country": "Delivery country.",
    "B2B": "Boolean column (True/False) â†’ Business to Business order ya normal customer order.",
    "fulfilled-by": "Kisne ship kiya (Amazon / Merchant).",
    "New": "(Likely derived column, may indicate new order or not).",
    "PendingS": "Pending shipment/order status ka flag."
}

# Print explanation in readable format
print("ðŸ“‘ Column Explanation:\n")
for col, desc in column_explanation.items():
    print(f"{col} â†’ {desc}")

df.isnull().sum()

# Handle missing values
# For numerical columns, fill with median.
df['Amount'] = df['Amount'].fillna(df['Amount'].mean())

df['ship-postal-code'].mean()

df['ship-postal-code']=df['ship-postal-code'].fillna(463819.77758652775)

df['ship-state'].mode()

df['ship-state']=df['ship-state'].fillna('MAHARASHTRA')

df['ship-city'].mode()

df['ship-city'] = df['ship-city'].fillna('BENGALURU')

df['currency'].mode()

df['currency']=df['currency'].fillna('INR')

df['ship-country'].mode()

df['ship-country']=df['ship-country'].fillna('IN')

df=df.drop('fulfilled-by', axis=1)

df=df.drop('New', axis=1)

df=df.drop('PendingS', axis=1)

df.isnull().sum()

df.shape

# Convert date columns to datetime
df['Date'] = pd.to_datetime(df['Date'], errors='coerce')

# Create new features
df['month'] = df['Date'].dt.month
df['year'] = df['Date'].dt.year
df['day_of_week'] = df['Date'].dt.day_name()

df.head(2)

df.shape

"""# **Sales Overview Analysis**

## **Total Sales Amount (INR)**
"""

total_Amount = df['Amount'].sum()

total_Amount=int(total_Amount)

print("\nTotal Sales Amount (INR):",total_Amount)

"""## **Average Order Value (INR)**"""

Average_order_value = df['Amount'].mean()

print("Average Order Value (INR):", Average_order_value)

"""## **Maximum Order Value (INR)**"""

Maximum_order_value = df['Amount'].max()

print("Order Maxmimum Value (INR):", Maximum_order_value)

"""## **Total Orders: 120229**"""

print("Total Orders:", df["Order ID"].nunique())

"""## **Status distribution**"""

status_distribution = df["Status"].value_counts()
status_distribution

"""## **Category-wise sales**"""

category_sales = df.groupby("Category")["Amount"].sum().sort_values(ascending=False)

category_sales

"""## **Size preference**"""

size_preference =(df["Size"].value_counts())

size_preference

"""## **Monthly sales trend**"""

monthly_sales = df.groupby("month")["Amount"].sum()

monthly_sales

"""## **Yearly Sales trend**"""

yearly_sales = df.groupby("year")["Amount"].sum()

yearly_sales

"""##  **Day-of-week sales trend**"""

day_sales = df.groupby("day_of_week")["Amount"].sum()
day_sales

"""#  **Visualization**

#### **This chart shows total sales for each product category. It helps identify which product types contribute the most to overall revenue.**
"""

plt.figure(figsize=(8,5))
sns.barplot(
    x=category_sales.index,
    y=category_sales.values,
    palette="Set2",          # soft professional colors
    edgecolor="black"        # bar borders for clarity
)

plt.title("Sales by Category", fontsize=14, fontweight="bold")
plt.xlabel("Category", fontsize=12)
plt.ylabel("Total Sales (INR)", fontsize=12)

plt.xticks(rotation=45, ha="right")       # labels readable
plt.grid(axis="y", linestyle="--", alpha=0.6)  # light horizontal grid
plt.tight_layout()
plt.show()

"""#### **This chart shows how sales change month by month. It helps identify seasonal patterns, growth trends, and months with the highest or lowest sales.**"""

plt.figure(figsize=(9,5))
sns.lineplot(
    x=monthly_sales.index,
    y=monthly_sales.values,
    marker="o",
    color="black",         # professional black
    linewidth=2,
    markersize=6
)

plt.title("Monthly Sales Trend", fontsize=14, fontweight="bold")
plt.xlabel("Month", fontsize=12)
plt.ylabel("Sales (INR)", fontsize=12)

plt.grid(True, linestyle="--", alpha=0.6)   # clean grid
plt.xticks(rotation=45)                     # readable month labels
plt.tight_layout()
plt.show()

"""#### **This chart shows sales performance across different days of the week. It highlights which weekdays generate the highest sales and helps identify peak shopping days.**"""

plt.figure(figsize=(8,5))
sns.barplot(
    x=day_sales.index,
    y=day_sales.values,
    palette="pastel",        # soft colors
    edgecolor="black"        # bar borders
)

plt.title("Sales by Day of Week", fontsize=14, fontweight="bold")
plt.xlabel("Day of Week", fontsize=12)
plt.ylabel("Sales (INR)", fontsize=12)

plt.grid(axis="y", linestyle="--", alpha=0.6)  # light horizontal grid
plt.tight_layout()
plt.show()

"""##  **Top 5 Cities by Sales**"""

city_sales = df.groupby("ship-city")["Amount"].sum().sort_values(ascending=False).head(5)
city_sales

plt.figure(figsize=(7,5))
sns.barplot(x=city_sales.values, y=city_sales.index, palette="viridis")
plt.title("Top 5 Cities by Sales")
plt.xlabel("Sales (INR)")
plt.ylabel("City")
plt.show()

"""## **Top 5 States by Sales**"""

state_sales = df.groupby("ship-state")["Amount"].sum().sort_values(ascending=False).head(5)
state_sales

plt.figure(figsize=(7,5))
sns.barplot(x=state_sales.values, y=state_sales.index, palette="viridis")
plt.title("Top 5 States by Sales")
plt.xlabel("Sales (INR)")
plt.ylabel("State")
plt.show()

"""### **Status-wise Sales Amount**

"""

status_sales = df.groupby("Status")["Amount"].sum().sort_values(ascending=False).head(7)
status_sales

"""#### **This chart shows total sales generated under each order status (Delivered, Shipped, Cancelled, etc.). It highlights which order outcomes contribute the most to revenue.**"""

plt.figure(figsize=(9,6))
sns.barplot(
    x=status_sales.index,
    y=status_sales.values,
    palette="Set3",          # soft professional colors
    edgecolor="black"        # bar edges for clarity
)

plt.title("Sales by Order Status", fontsize=14, fontweight="bold")
plt.xlabel("Order Status", fontsize=12)
plt.ylabel("Sales (INR)", fontsize=12)

plt.xticks(rotation=45, ha="right")  # better readability
plt.grid(axis="y", linestyle="--", alpha=0.6)  # light horizontal grid
plt.tight_layout()
plt.show()

"""## **Courier Status Count**"""

Courier_status = df["Courier Status"].value_counts()

Courier_status

"""#### **This chart shows the distribution of orders across different courier statuses, such as shipped, in transit, delivered, or cancelled. It helps track logistics performance and identify bottlenecks.**"""

plt.figure(figsize=(5,5))
sns.countplot(
    x="Courier Status",
    data=df,
    palette="Set2",          # professional color set
    edgecolor="black"        # bar borders for clarity
)

plt.title("Courier Status Distribution", fontsize=14, fontweight="bold")
plt.xlabel("Courier Status", fontsize=12)
plt.ylabel("Number of Orders", fontsize=12)

plt.xticks(rotation=20)      # tilt labels for readability
plt.grid(axis="y", linestyle="--", alpha=0.6)  # light grid on y-axis
plt.tight_layout()
plt.show()

"""## **B2B vs Non-B2B Sales**"""

b2b_sales = df.groupby("B2B")["Amount"].sum()

b2b_sales

"""#### **This chart shows the sales share between B2B (Business-to-Business) and Non-B2B orders. It highlights which segment contributes more to overall sales**"""

plt.figure(figsize=(4,5))
plt.pie(
    b2b_sales,
    labels=b2b_sales.index,
    autopct="%1.1f%%",
    startangle=90,
    colors=sns.color_palette("pastel")[:2],  # soft 2 colors
    wedgeprops={"edgecolor": "white"},       # white borders
    textprops={"fontsize":10},               # readable text
    pctdistance=0.75,                        # % text thoda andar
    labeldistance=1.1                        # labels thoda bahar
)
plt.title("B2B vs Non-B2B Sales Share", fontsize=14, fontweight="bold")
plt.show()

"""## **Category + Size Heatmap**"""

category_size = df.pivot_table(index="Category", columns="Size",
                               values="Amount", aggfunc="sum", fill_value=0)

plt.figure(figsize=(12,6))
sns.heatmap(category_size, cmap="YlGnBu", annot=True, fmt=".0f")
plt.title("Category vs Size Sales Heatmap")
plt.show()

""" ## **Daily Sales Trend (Date wise)**"""

daily_sales = df.groupby("Date")["Amount"].sum()

"""#### **Daily sales vary significantly, with clear peaks on certain dates indicating higher demand.**"""

plt.figure(figsize=(12,6))
plt.plot(
    daily_sales.index,
    daily_sales.values,
    marker="o",
    linestyle="-",
    color="black",         # professional black
    linewidth=2,
    markersize=6
)

# Titles & labels
plt.title("Daily Sales Trend", fontsize=16, fontweight="bold")
plt.xlabel("Date", fontsize=12)
plt.ylabel("Sales (INR)", fontsize=12)

# Grid and style
plt.grid(True, linestyle="--", alpha=0.6)
plt.xticks(rotation=45)   # dates readable
plt.tight_layout()
plt.show()

"""### **Average Order Value by City**"""

city_average = df.groupby("ship-city")["Amount"].mean().sort_values(ascending=False).head(10)
city_average

plt.figure(figsize=(10,6))
sns.barplot(x=city_average.values, y=city_average.index, palette="coolwarm")
plt.title("Top 10 Cities by Average Order Value")
plt.xlabel("Avg Order Value (INR)")
plt.ylabel("City")
plt.show()

"""### **Month & Year Heatmap (Seasonality)**"""

month_year = df.pivot_table(index="year", columns="month", values="Amount", aggfunc="sum", fill_value=0)

plt.figure(figsize=(5,5))
sns.heatmap(month_year, annot=True, fmt=".0f", cmap="Blues")
plt.title("Sales Heatmap by Month & Year")
plt.show()

"""###  **Cancelled vs Delivered Orders (Count + %)**"""

cancel_vs_deliver = (df["Status"].value_counts(normalize=True) * 100).head(5)
cancel_vs_deliver

"""#### **Most orders are successfully delivered, while a smaller share is cancelled or still in transit.**"""

plt.figure(figsize=(7,7))
plt.pie(
    cancel_vs_deliver,
    labels=cancel_vs_deliver.index,
    autopct="%1.1f%%",
    startangle=35,
    colors=sns.color_palette("pastel"),
    wedgeprops={"edgecolor":"white"},    # white border between slices
    textprops={"fontsize":10},
    pctdistance=0.8,
    labeldistance=1.1
)
plt.title("Order Status % Share", fontsize=14, fontweight="bold")
plt.show()

"""##  **Sales Contribution by Sales Channel**"""

channel_sales = df.groupby("Sales Channel")["Amount"].sum()
channel_sales

"""#### **Most sales are contributed by Amazon.in Merchant channel, while other channels have a smaller share.**"""

plt.figure(figsize=(4,5))
plt.pie(channel_sales, labels=channel_sales.index, autopct="%1.1f%%", startangle=140, colors=["green", "red"]
)
plt.title("Sales Contribution by Channel")
plt.show()

"""## **Sales Distribution (Histogram)**

1.   List item
2.   List item

#### **This histogram shows the distribution of order amounts. It helps identify common order value ranges, peaks, and rare high-value orders, giving insights into customer spending patterns.**
"""

plt.figure(figsize=(8,5))
sns.histplot(
    df["Amount"],
    bins=30,
    kde=True,                  # shows smooth density curve
    color="#1f77b4",           # professional blue
    edgecolor="black",
    alpha=0.7
)

plt.title("Distribution of Sales Amount", fontsize=14, fontweight="bold")
plt.xlabel("Order Amount (INR)", fontsize=12)
plt.ylabel("Frequency", fontsize=12)
plt.grid(axis="y", linestyle="--", alpha=0.5)  # horizontal grid for readability
plt.tight_layout()
plt.show()

"""# **Boxplot - Amount by Category**

#### **This boxplot shows the distribution of sales amounts for each product category. It highlights median sales, interquartile ranges, and potential outliers, helping understand variability and top-performing categories**
"""

plt.figure(figsize=(10,6))
sns.boxplot(
    x="Category",
    y="Amount",
    data=df,
    palette="pastel",
    fliersize=5,               # size of outlier points
    linewidth=1.2              # thicker box lines
)

plt.title("Sales Amount Distribution by Category", fontsize=14, fontweight="bold")
plt.xlabel("Category", fontsize=12)
plt.ylabel("Sales Amount (INR)", fontsize=12)
plt.xticks(rotation=45, ha="right")  # labels readable
plt.grid(axis="y", linestyle="--", alpha=0.5)
plt.tight_layout()
plt.show()

"""# **Sales by Size (Bar Chart)**

#### **This chart shows total sales by product size. It highlights which sizes contribute most to revenue and helps understand customer size preferences.**
"""

plt.figure(figsize=(9,5))
sns.barplot(
    x=size_preference.index,
    y=size_preference.values,
    palette="viridis",         # professional color gradient
    edgecolor="black"
)

plt.title("Sales by Size", fontsize=14, fontweight="bold")
plt.xlabel("Size", fontsize=12)
plt.ylabel("Total Sales (INR)", fontsize=12)

plt.grid(axis="y", linestyle="--", alpha=0.5)  # horizontal grid
plt.xticks(rotation=0)                          # size labels readable
plt.tight_layout()
plt.show()

"""# **Count of Orders by Day of Week**

#### **This chart shows the number of orders placed on each day of the week. It highlights peak order days and helps in understanding weekly demand patterns.**
"""

# Convert date columns to datetime
df['Date'] = pd.to_datetime(df['Date'], errors='coerce')

# Create new features
df['month'] = df['Date'].dt.month
df['year'] = df['Date'].dt.year
df['day_of_week'] = df['Date'].dt.day_name()

# plt.figure(figsize=(8,5))
# sns.countplot(x="day_of_week", data=df, order=["Monday","Tuesday","Wednesday",
#                "Thursday","Friday","Saturday","Sunday"],
#                palette="Set3")
# plt.title("Orders Count by Day of Week")
# plt.xlabel("Day of Week")
# plt.ylabel("Number of Orders")
# plt.show()
plt.figure(figsize=(10,5))
sns.countplot(
    x="day_of_week",
    data=df,
    order=["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],
    palette="Set3",
    edgecolor="black"
)

plt.title("Orders Count by Day of Week", fontsize=14, fontweight="bold")
plt.xlabel("Day of Week", fontsize=12)
plt.ylabel("Number of Orders", fontsize=12)
plt.grid(axis="y", linestyle="--", alpha=0.5)  # horizontal grid for readability
plt.tight_layout()
plt.show()

"""# **Scatter Plot - Sales vs Postal Code (for outliers)**

#### **This scatter plot shows the relationship between postal codes and order amounts. Larger and darker points indicate higher-value sales, helping identify regions generating maximum revenue**
"""

plt.figure(figsize=(12,6))
sns.scatterplot(
    x="ship-postal-code",
    y="Amount",
    data=df,
    hue="Amount",                  # color by sales amount for clarity
    palette="viridis",
    size="Amount",                 # size proportional to sales
    sizes=(20, 200),               # min & max marker size
    alpha=0.7,
    edgecolor="black"
)

plt.title("Sales vs Postal Code", fontsize=14, fontweight="bold")
plt.xlabel("Postal Code", fontsize=12)
plt.ylabel("Order Amount (INR)", fontsize=12)
plt.xticks(rotation=45)           # postal codes readable
plt.grid(True, linestyle="--", alpha=0.5)
plt.tight_layout()
plt.show()

"""## **Correlation Heatmap (Numerical Columns)**"""

plt.figure(figsize=(6,4))
sns.heatmap(df[["Amount","month","year"]].corr(), annot=True, cmap="coolwarm",
            fmt=".2f")
plt.title("Correlation Heatmap")
plt.show()

"""# **Pie Chart - Ship Country Sales**

#### **This chart shows the share of total sales contributed by each shipping country. It helps identify which countries generate the most revenue, highlighting key markets for the business**
"""

country_sales = df.groupby("ship-country")["Amount"].sum()
plt.figure(figsize=(4,5))
plt.pie(country_sales, labels=country_sales.index, autopct="%1.1f%%", startangle=90, colors=sns.color_palette("pastel"))
plt.title("Sales Share by Country")
plt.show()

"""## **Stacked Bar - Month vs Status**"""

month_status = df.groupby(["month","Status"])["Order ID"].count().unstack().fillna(0)
month_status.plot(kind="bar", stacked=True, figsize=(12,6), colormap="tab20")
plt.title("Monthly Orders by Status (Stacked Bar)")
plt.xlabel("Month")
plt.ylabel("Number of Orders")
plt.show()

"""## **Treemap - Sales by Category**



"""

!pip install squarify

import squarify
category_sales = df.groupby("Category")["Amount"].sum().sort_values(ascending=False).head(5)
plt.figure(figsize=(10,6))
squarify.plot(sizes=category_sales.values, label=category_sales.index, value=category_sales.values, alpha=0.8)
plt.title("Sales Treemap by Category")
plt.axis("off")
plt.show()

"""## **Violin Plot - Sales by Day of Week**"""

plt.figure(figsize=(10,6))
sns.violinplot(x="day_of_week", y="Amount", data=df, palette="muted",
               order=["Monday","Tuesday","Wednesday","Thursday"
               ,"Friday","Saturday","Sunday"])
plt.title("Sales Distribution by Day of Week")
plt.show()

"""## **Pairplot - Relationships in Data**"""

sns.pairplot(df[["Amount","month","year"]], diag_kind="kde")
plt.suptitle("Pairplot: Sales vs Time Variables", y=1.02)
plt.show()

"""# **1. Classification â€“ Predict Order Status**

#### **(Target = Status â†’ e.g., Delivered, Cancelled, etc.)**
---
"""

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import  classification_report, accuracy_score, confusion_matrix

# df=pd.read_csv('Amazon Sale Report.csv')

# Select features
X = df[["Fulfilment", "Sales Channel", "Category", "Size", "ship-state", "B2B"]]
y = df["Status"]

# Encode categorical variables
for col in X.columns:
    if X[col].dtype == "object":
        le = LabelEncoder()
        X[col] = le.fit_transform(X[col].astype(str))

# Encode target as well
y = LabelEncoder().fit_transform(y.astype(str))

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model
clf = RandomForestClassifier(random_state=42)
clf.fit(X_train, y_train)

# Prediction
y_pred = clf.predict(X_test)

# Evaluation
print("Accuracy:", accuracy_score(y_test, y_pred))

"""# **Accuracy: 0.8220654365017832**"""

print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Confusion Matrix
plt.figure(figsize=(5,4))
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt="d", cmap="Blues")
plt.title("Confusion Matrix - Order Status Prediction")
plt.show()

"""# **2. Regression â€“ Predict Sales Amount**

#### **(Target = Amount â†’ continuous values in INR)**
---
"""

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Select features (without Amount itself!)
X = df[["Fulfilment", "Sales Channel", "Category", "Size", "ship-state", "B2B", "Qty"]]
y = df["Amount"]

# OneHotEncoder
from sklearn.preprocessing import OneHotEncoder
encoder = OneHotEncoder(handle_unknown="ignore", sparse_output=False)
X_encoded = encoder.fit_transform(X)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size=0.2, random_state=42)

# Model
reg = RandomForestRegressor(n_estimators=50, random_state=42)  # n_estimators à¤•à¤® à¤•à¤¿à¤¯à¤¾
reg.fit(X_train, y_train)


# Prediction
y_pred = reg.predict(X_test)

# Example random input
sample_data = pd.DataFrame([{
    "Fulfilment": "Amazon",
    "Sales Channel": "Amazon.in",
    "Category": "Shirt",
    "Size": "M",
    "ship-state": "MAHARASHTRA",
    "B2B": False,
    "Qty": 2
}])

# Encode same as training
sample_encoded = encoder.transform(sample_data)

# Prediction
predicted_price = reg.predict(sample_encoded)
print("Predicted Price:", predicted_price[0])

# Multiple test examples
test_examples = pd.DataFrame([
    {
        "Fulfilment": "Amazon",
        "Sales Channel": "Amazon.in",
        "Category": "Shirt",
        "Size": "M",
        "ship-state": "MAHARASHTRA",
        "B2B": False,
        "Qty": 2
    },
    {
        "Fulfilment": "Merchant",
        "Sales Channel": "Amazon.in",
        "Category": "T-shirt",
        "Size": "XL",
        "ship-state": "KARNATAKA",
        "B2B": True,
        "Qty": 5
    },
    {
        "Fulfilment": "Amazon",
        "Sales Channel": "Amazon.in",
        "Category": "Blazzer",
        "Size": "L",
        "ship-state": "TAMIL NADU",
        "B2B": False,
        "Qty": 1
    },
    {
        "Fulfilment": "Merchant",
        "Sales Channel": "Amazon.in",
        "Category": "Trousers",
        "Size": "S",
        "ship-state": "TELANGANA",
        "B2B": False,
        "Qty": 3
    }
])

# Encode and predict
test_encoded = encoder.transform(test_examples)
pred_prices = reg.predict(test_encoded)

# Show predictions
for i, price in enumerate(pred_prices):
    print(f"Example {i+1} â†’ Predicted Price: {price:.2f}")

# Evaluation")
print("RMSE:", np.sqrt(mean_squared_error(y_test, y_pred)))
print("RÂ² Score:", r2_score(y_test, y_pred))

"""# **Regression Model Results**

1.   RMSE: 209.03875740608368
2.   RÂ² Score: 0.41304111134867827


"""
# -------------------------
# Save model with compression
# -------------------------

joblib.dump(reg, 'Price_model.pkl', compress=3)  
print("âœ… Compressed model saved as 'Price_model.pkl'")

# Optional: Google Colab download (à¤…à¤—à¤° Colab use à¤•à¤° à¤°à¤¹à¥‡ à¤¹à¥‹)
try:
    from google.colab import files
    files.download('Price_model.pkl')
except:
    pass

